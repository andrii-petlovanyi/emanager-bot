from telebot import asyncio_filters
from telebot.async_telebot import AsyncTeleBot
from telebot.asyncio_storage import StateMemoryStorage
from telebot.asyncio_handler_backends import State, StatesGroup
from telebot import types
import pymongo


client = pymongo.MongoClient(
	"mongodb+srv://user:user@user.e2qwffh.mongodb.net/?retryWrites=true&w=majority")


current_db = client['user']

collection = current_db.posts
collection_offer = current_db.offers


bot = AsyncTeleBot(TOKEN, state_storage=StateMemoryStorage())

class MyStates(StatesGroup):
	offer = State()

@bot.message_handler(commands=['start'])
async def start(message):
	start_message = f'–ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.first_name}</b> üëã! \n\n–Ø - <b>Helperü§ñ</b>, —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ü§ì —Ç–∞ –≥—ñ–¥üòé –≤ —Å–≤—ñ—Ç—ñ —Ç–µ—Ö–Ω—ñ–∫–∏ <b>Elx</b>. –¢–æ–º—É –∑ —Ä–∞–¥—ñ—Å—Ç—é –ø–æ–¥—ñ–ª—é—Å—å –∑ —Ç–æ–±–æ—é –≤—Å—ñ–º–∞ —Ü—ñ–∫–∞–≤–∏–º–∏ —Ñ—ñ—à–∫–∞–º–∏ —Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–æ –∫–æ–∂–Ω—ñ–π —ñ–∑ –º–æ–¥–µ–ª–µ–πü§ó. –î–ª—è —Ü—å–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ª–∏—à–µ –≤–≤–µ—Å—Ç–∏ –º–æ–¥–µ–ª—å –Ω–∏–∂—á–µ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–µ–Ω—ñüë®‚Äçüíª. \n\n–ù—É —â–æ –∂, –ø–æ–≥–Ω–∞–ª–∏?üëª'
	await bot.send_message(message.chat.id, start_message, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–∞")
async def command_text_add(messa):
	start_message = f'–ü—Ä–∏–≤—ñ—Ç, <b>{messa.from_user.first_name}</b> üëã! \n\n–Ø - <b>Helperü§ñ</b>, —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ü§ì —Ç–∞ –≥—ñ–¥üòé –≤ —Å–≤—ñ—Ç—ñ —Ç–µ—Ö–Ω—ñ–∫–∏ <b>Elx</b>. –¢–æ–º—É –∑ —Ä–∞–¥—ñ—Å—Ç—é –ø–æ–¥—ñ–ª—é—Å—å –∑ —Ç–æ–±–æ—é –≤—Å—ñ–º–∞ —Ü—ñ–∫–∞–≤–∏–º–∏ —Ñ—ñ—à–∫–∞–º–∏ —Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–æ –∫–æ–∂–Ω—ñ–π —ñ–∑ –º–æ–¥–µ–ª–µ–πü§ó. –î–ª—è —Ü—å–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ª–∏—à–µ –≤–≤–µ—Å—Ç–∏ –º–æ–¥–µ–ª—å –Ω–∏–∂—á–µ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–µ–Ω—ñüë®‚Äçüíª. \n\n–ù—É —â–æ –∂, –ø–æ–≥–Ω–∞–ª–∏?üëª'
	await bot.send_message(messa.chat.id, start_message, parse_mode='html')


@bot.message_handler(commands=['–î–æ–¥–∞—Ç–∏'])
async def add(message):
	add_message = '–î–æ–ø–æ–º–æ–∂–∏ –º–µ–Ω—ñ —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–µüòá. –î–ª—è —Ü—å–æ–≥–æ –≤–∫–∞–∂–∏ –≤—ñ–¥—Å—É—Ç–Ω—é –º–æ–¥–µ–ª—å —ñ —è –æ–¥—Ä–∞–∑—É –∂ –∑–∞–π–º—É—Å—å —ó—ó –≤–∏–≤—á–µ–Ω–Ω—è–º —Ç–∞ –ø–æ—à—É–∫–æ–º –≤—Å—ñ—Ö —Ü—ñ–∫–∞–≤–∏—Ö —Ñ—ñ—à–æ–∫ü§ì. \n\n–ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –º–æ–¥–µ–ª—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–∏–º–≤–æ–ª "!" –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Å–ª–æ–≤–∞üôè. \n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <b>!EWS426BUI</b> \n\n–ó—Ä–æ–∑—É–º—ñ–≤?üôÉ \n–¢–æ–¥—ñ –º–µ—Ä—â—ñ–π –Ω–∞–±–∏—Ä–∞–π üëá'
	await bot.set_state(message.from_user.id, MyStates.offer, message.chat.id)
	await bot.send_message(message.chat.id, add_message, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == "–î–æ–¥–∞—Ç–∏")
async def command_text_add(message):
	await bot.set_state(message.from_user.id, MyStates.offer, message.chat.id)
	await bot.send_message(message.chat.id, '–î–æ–ø–æ–º–æ–∂–∏ –º–µ–Ω—ñ —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–µüòá. –î–ª—è —Ü—å–æ–≥–æ –≤–∫–∞–∂–∏ –≤—ñ–¥—Å—É—Ç–Ω—é –º–æ–¥–µ–ª—å —ñ —è –æ–¥—Ä–∞–∑—É –∂ –∑–∞–π–º—É—Å—å —ó—ó –≤–∏–≤—á–µ–Ω–Ω—è–º —Ç–∞ –ø–æ—à—É–∫–æ–º –≤—Å—ñ—Ö —Ü—ñ–∫–∞–≤–∏—Ö —Ñ—ñ—à–æ–∫ü§ì. \n–î–∞–≤–∞–π –º–µ—Ä—â—ñ–π –Ω–∞–±–∏—Ä–∞–π üëá', parse_mode='html')


@bot.message_handler(state=MyStates.offer)
async def offer_get(message):
	await model_add(message)
	await bot.delete_state(message.from_user.id, message.chat.id)

async def model_add(messa):

	offer = {
		'user_id': messa.from_user.id,
		'model': messa.text,
		'FirstName': messa.from_user.first_name,
		'LastName': messa.from_user.last_name,
		'Date': messa.date,
		'Username': messa.from_user.username,
		'Premium': messa.from_user.is_premium
	}

	collection_offer.insert_one(offer)

	await bot.send_message(
		messa.chat.id, f'–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –¥–æ–¥–∞–Ω–æü•≥! –©–∏—Ä–æ –¥—è–∫—É—é —Ç–æ–±—ñ, <b>{messa.from_user.first_name}</b>! –¢–∏ –¥–æ–ø–æ–º–æ–≥–∞—î—à –º–µ–Ω—ñ —Ä–æ—Å—Ç–∏ —Ç–∞ —Å—Ç–∞–≤–∞—Ç–∏ —â–µ –∫—Ä—É—Ç—ñ—à–∏–ºüòé! –¢–µ–ø–µ—Ä —Ä–∞–¥–∂—É —Ç–æ–±—ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ <b>–ì–æ–ª–æ–≤–Ω—É</b>. –î–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–æ—é –Ω–∞ –ø–∞–Ω–µ–ª—ñ üëá', parse_mode='html')


@bot.message_handler(content_types='text')
async def search(message):

	model = []
	info = []
	markup_official_link = []
	markup_manual_link = []
	photo = []

	for chanel in collection.find({'model': message.text.lower()}):
		info = chanel['info']
		model = chanel['model']
		markup_official_link = chanel['urlOff']
		markup_manual_link = chanel['urlBook']
		photo = chanel['imgUrl']

	markup = types.InlineKeyboardMarkup(row_width=1)
	off = types.InlineKeyboardButton('üíé –û—Ñ—Ñ. —Å–∞–π—Ç', url=markup_official_link)
	manual = types.InlineKeyboardButton('üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è', url=markup_manual_link)
	markup.add(off, manual)

	if message.text.lower() == model:
		info2 = '\n' + info + '\n\n' + '–¢–∞–∫–æ–∂ —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É —Å–∞–π—Ç—ñüíé —Ç–∞ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –ø–æ—Å—ñ–±–Ω–∏–∫–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞üìñ. –ü—Ä–æ—Å—Ç–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏  –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µüëá'
		await bot.send_photo(message.chat.id, photo, caption=info2,
		parse_mode='html', reply_markup=markup)
	else:
		markup = types.ReplyKeyboardMarkup(
			resize_keyboard=True, row_width=1, one_time_keyboard=True)
		start = types.KeyboardButton('–ì–æ–ª–æ–≤–Ω–∞')
		add = types.KeyboardButton('–î–æ–¥–∞—Ç–∏')
		markup.add(start, add)
		await bot.send_message(message.chat.id, '–í–∏–±–∞—á, –∞–ª–µ –≤–≤–µ–¥–µ–Ω–∞ —Ç–æ–±–æ—é –º–æ–¥–µ–ª—å –º–µ–Ω—ñ –Ω–µ –∑–Ω–∞–π–æ–º–∞‚òπÔ∏è. –ü–µ—Ä–µ–≤—ñ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –º–æ–¥–µ–ª—å —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑üôÇ. –ê–±–æ —Ç–∏ –º–æ–∂–µ—à –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º —ñ —è –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ –¥—ñ–∑–Ω–∞—é—Å—åüßê –≤—Å–µ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à–µ —Ç–∞ –∑–º–æ–∂—É –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∑ —Ç–æ–±–æ—é —Ü—ñ–Ω–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –≤–∂–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—Éüòé. \n\n–©–æ–± –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—é –º–æ–¥–µ–ª—å –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏"üëá', parse_mode='html', reply_markup=markup)


bot.add_custom_filter(asyncio_filters.StateFilter(bot))

import asyncio
asyncio.run(bot.polling())
